pipeline {
    agent {
        node {
            label 'azure'
        }
    }
    
     options    {
                timestamps()
                buildDiscarder(logRotator(numToKeepStr: '2', artifactNumToKeepStr: '2'))
                timeout(time: 1, unit: 'HOURS')
                disableConcurrentBuilds()
                }

    parameters {
            string(name: 'appBranch', defaultValue: 'master', description: "Application Branch name of the Repo")
            string(name: 'gitURL', defaultValue: 'https://github.com/pythonlifedevops/aws-b2-maven-app.git', description: "Pass the Maven Repo Source Code GIT URL")
                }  

    stages {
        stage('Git cloning') {
            steps 
            {
                
                git branch: 'main', url: 'https://github.com/sai-kadinti/aws-maven-project.git'
            }
        }
        stage('mvn build') {
            steps {
                sh ' mvn clean package'
            }
        }
        stage('docker build') {
            steps {
                sh ' docker build . -f dockerfile_testapp -t kadintisai/awsmaven:latest'
            }
        }
        stage('docker login') {
            steps {
                
                withCredentials([usernamePassword(credentialsId: 'dockerlogin', passwordVariable: 'dockerpwd', usernameVariable: 'dockeruser')]) {
                
                sh 'docker login -u ${dockeruser} -p ${dockerpwd}'
                }
            }
        }
        stage('docker push') {
            steps {
                sh 'docker push kadintisai/awsmaven:latest'
            }
        }
        stage('K8s Auto deployement') {
            steps {
                dir('manifests')
                {
                    sh 'ls -l'
                    sh 'kubectl --server=https://k8s-dns-rkwaz453.hcp.eastus.azmk8s.io:443 --insecure-skip-tls-verify --token="eyJhbGciOiJSUzI1NiIsImtpZCI6IlFadTFWTDRGLWpxXzF5Tnh1SlpCMzdlaHloS0U3aFhrcDZlU0YxRjR6ZlEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImplbmtpbnMtc2EiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiamVua2lucyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjA2OGY4NGQ0LWI5MDAtNGM4NC1iNjE4LTY1YTk4MjdkZjVhZiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmplbmtpbnMifQ.q8LOE2QrrAt-z_CSy9oH0gSrURF2JJNmsqhu10JEYWHo4BisKlZPWpMBS2kYiWVjJyt6Qmc5Hg8yCuRYwRQTImOzs-UP42Hpkp39S8UwOjpSXpF2MAUolDCZFv0Qi_Ns8m6q0W1l7-d7gdALIICM8t3jsMF5Q8m-6lMHoxqpS8AY798ION7DhwoutkKItPELuJK0zuwh6_gO2Hyktu7x8vOrVid7vh_BdWyY1STbGgdL7sZaSPRGa6oAzaZYk67MM3HP9ptHZ8uuwfrG7wg0od3CLaWKtJ0OC1AvFZTo8LWtXhK-8BOIpm8uaDOUml5nzYjcNqFuZcHK7VRTOmYC_ovJjZpAUSiXUn10IlKMUxa91J8WQt7tq_4do7qcz_Quma4FG1aw_6KEamub0IkDw1l4ZrKGg3eKzZmjFzyZckd7MeBe0wqX1QufO8bIkXB1ZXcHiQo8FAbYGaZmpx0hpbYAa8yJOmEPIatY3qF-h5biI_mDm0rYEb7b6H4KeF-tHiShtvBM6Bavg5haLDmEs8NwlRda9etZYpi4NHmvI5b3Ds7rG8OSHomz4OFexGEx0FRUSyD-dD7ciSgpTbxYnY0mkgMrV_2GSxgjHaRFqw4255NN1PPKmJwfG87Li2ThA7OpXceCscoufjFQFWGPdak97Iv_J076CiavFL5g-xA" apply -f deployment.yaml'
                    sh 'kubectl --server=https://k8s-dns-rkwaz453.hcp.eastus.azmk8s.io:443 --insecure-skip-tls-verify --token="eyJhbGciOiJSUzI1NiIsImtpZCI6IlFadTFWTDRGLWpxXzF5Tnh1SlpCMzdlaHloS0U3aFhrcDZlU0YxRjR6ZlEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImplbmtpbnMtc2EiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiamVua2lucyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjA2OGY4NGQ0LWI5MDAtNGM4NC1iNjE4LTY1YTk4MjdkZjVhZiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmplbmtpbnMifQ.q8LOE2QrrAt-z_CSy9oH0gSrURF2JJNmsqhu10JEYWHo4BisKlZPWpMBS2kYiWVjJyt6Qmc5Hg8yCuRYwRQTImOzs-UP42Hpkp39S8UwOjpSXpF2MAUolDCZFv0Qi_Ns8m6q0W1l7-d7gdALIICM8t3jsMF5Q8m-6lMHoxqpS8AY798ION7DhwoutkKItPELuJK0zuwh6_gO2Hyktu7x8vOrVid7vh_BdWyY1STbGgdL7sZaSPRGa6oAzaZYk67MM3HP9ptHZ8uuwfrG7wg0od3CLaWKtJ0OC1AvFZTo8LWtXhK-8BOIpm8uaDOUml5nzYjcNqFuZcHK7VRTOmYC_ovJjZpAUSiXUn10IlKMUxa91J8WQt7tq_4do7qcz_Quma4FG1aw_6KEamub0IkDw1l4ZrKGg3eKzZmjFzyZckd7MeBe0wqX1QufO8bIkXB1ZXcHiQo8FAbYGaZmpx0hpbYAa8yJOmEPIatY3qF-h5biI_mDm0rYEb7b6H4KeF-tHiShtvBM6Bavg5haLDmEs8NwlRda9etZYpi4NHmvI5b3Ds7rG8OSHomz4OFexGEx0FRUSyD-dD7ciSgpTbxYnY0mkgMrV_2GSxgjHaRFqw4255NN1PPKmJwfG87Li2ThA7OpXceCscoufjFQFWGPdak97Iv_J076CiavFL5g-xA" apply -f service.yaml'
                    sh 'kubectl --server=https://k8s-dns-rkwaz453.hcp.eastus.azmk8s.io:443 --insecure-skip-tls-verify --token="eyJhbGciOiJSUzI1NiIsImtpZCI6IlFadTFWTDRGLWpxXzF5Tnh1SlpCMzdlaHloS0U3aFhrcDZlU0YxRjR6ZlEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImplbmtpbnMtc2EiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiamVua2lucyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjA2OGY4NGQ0LWI5MDAtNGM4NC1iNjE4LTY1YTk4MjdkZjVhZiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmplbmtpbnMifQ.q8LOE2QrrAt-z_CSy9oH0gSrURF2JJNmsqhu10JEYWHo4BisKlZPWpMBS2kYiWVjJyt6Qmc5Hg8yCuRYwRQTImOzs-UP42Hpkp39S8UwOjpSXpF2MAUolDCZFv0Qi_Ns8m6q0W1l7-d7gdALIICM8t3jsMF5Q8m-6lMHoxqpS8AY798ION7DhwoutkKItPELuJK0zuwh6_gO2Hyktu7x8vOrVid7vh_BdWyY1STbGgdL7sZaSPRGa6oAzaZYk67MM3HP9ptHZ8uuwfrG7wg0od3CLaWKtJ0OC1AvFZTo8LWtXhK-8BOIpm8uaDOUml5nzYjcNqFuZcHK7VRTOmYC_ovJjZpAUSiXUn10IlKMUxa91J8WQt7tq_4do7qcz_Quma4FG1aw_6KEamub0IkDw1l4ZrKGg3eKzZmjFzyZckd7MeBe0wqX1QufO8bIkXB1ZXcHiQo8FAbYGaZmpx0hpbYAa8yJOmEPIatY3qF-h5biI_mDm0rYEb7b6H4KeF-tHiShtvBM6Bavg5haLDmEs8NwlRda9etZYpi4NHmvI5b3Ds7rG8OSHomz4OFexGEx0FRUSyD-dD7ciSgpTbxYnY0mkgMrV_2GSxgjHaRFqw4255NN1PPKmJwfG87Li2ThA7OpXceCscoufjFQFWGPdak97Iv_J076CiavFL5g-xA" rollout restart deployment/java-app-deployment'

                    echo "K8s Deployement done...!!"

                    sh 'kubectl get deployments'
                    sh 'sleep 100; kubectl get services'
                }
                
            }
        }
        stage ('Archive and clean Workspace') {
            steps {
                archiveArtifacts artifacts: 'target/*.jar' , followSymlinks: false
                cleanws() 
            }
        }
    }
    post {
        success {
            echo 'The pipeline succeed...!!'
        }
        failure {
            echo 'The pipeline failed....!!'
        }
    }
}