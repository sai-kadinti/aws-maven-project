pipeline {
    agent {
        node {
            label 'awsvm'
        }
    }
    
     options    {
                timestamps()
                buildDiscarder(logRotator(numToKeepStr: '2', artifactNumToKeepStr: '2'))
                timeout(time: 1, unit: 'HOURS')
                disableConcurrentBuilds()
                }

    parameters {
            string(name: 'appBranch', defaultValue: 'master', description: "Application Branch name of the Repo")
            string(name: 'gitURL', defaultValue: 'https://github.com/pythonlifedevops/aws-b2-maven-app.git', description: "Pass the Maven Repo Source Code GIT URL")
                }  

    stages {
        stage('Git cloning') {
            steps 
            {
                
                git branch: 'main', url: 'https://github.com/sai-kadinti/aws-maven-project.git'
            }
        }
        stage('mvn build') {
            steps {
                sh ' mvn clean package'
            }
        }
        stage('docker build') {
            steps {
                sh ' docker build . -f dockerfile_testapp -t kadintisai/awsmaven:latest'
            }
        }
        stage('docker login') {
            steps {
                
                withCredentials([usernamePassword(credentialsId: 'dockerlogin', passwordVariable: 'dockerpwd', usernameVariable: 'dockeruser')]) {
                
                sh 'docker login -u ${dockeruser} -p ${dockerpwd}'
                }
            }
        }
        stage('docker push') {
            steps {
                sh 'docker push kadintisai/awsmaven:latest'
            }
        }
        stage('K8smanifest Checkout') {
            steps {
                git 'https://github.com/sai-kadinti/aws-k8s-cicd.git'
            }
        }
        stage('K8s Auto deployement') {
            steps {
                dir('manifests')
                {
                    sh 'ls -l'
                    sh 'kubectl --server=https://dna-name-mdrwrqam.hcp.eastus.azmk8s.io:443 --insecure-skip-tls-verify --token="eyJhbGciOiJSUzI1NiIsImtpZCI6ImNESzlnT1M4QzlHMzVmLV9JbEZsVkhxSXZwS0xmcXR3NUpabmUxVFNvMmMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImplbmtpbnMtc2EiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiamVua2lucyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjExYWIyMDllLWMyMGQtNGZiYS05MjE4LTUzMTk2MWIxMTBiOSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmplbmtpbnMifQ.ftUyqHLVZGYxK2tgFeDdCo9Kv22_cmWQYbtMcZPO6tk_lAoEEflNT9WCnBEo9R7DDR1PLNw9UUsgCi7kOr8zI3xT1P0bWMcwvp2hRnF6-aEk2dR6-cK-m1Uh04TYFICnwWkuGO0ZOVW2WCea2SyaIESVe2-TK2u0DJXXTuv_hT5LGFrOr6-9Ew1MR1vUYKTjNvNCYrcHJOTb5ujsD4_lcs8MRFxpPcyTnNxuuvJwgC-gKv_FaZycdFT7lyNr8Oq_M4L9bgpR3OW3Vmp34cCwWHDHN-sM6ysNKzbaUDQtf7yKo6t54JhRSEFHusJqrKBe1UO9zyUFooWBld_wgN5aCsZclnHTDWwZg-cKYFHmrp3hoir7D2H52tKe2-OdUuhVk5bKJHO2xT1VitbcX5OmPx5ymtVW3nTCu37EnHouzkZqNBpuqQqgyHiALiUUu0Va6qgkcBtvhi94dO9h3udLWyv2gIr1WExQ8C44AmwqiZtq0ahgD2Ptysok-V-HAUec7pwIHkdnKLEMAQx_NNJqL2eRq4xQlLrVEb9LJI1d3g49XyqCjWTqxj3IsgZFsFUn_B7RIEn3EjSYn0MJ4a9X3KOv0A_eJUlk1mUq_zI1FpzmT0I3id8I8HIWwQ8u5xObY1y7E9f9_XjcYG7Mk8Cd5FFEShCKoHiWzsnKLOBswv4" apply -f deployment.yml'
                    sh 'kubectl --server=https://dna-name-mdrwrqam.hcp.eastus.azmk8s.io:443 --insecure-skip-tls-verify --token="eyJhbGciOiJSUzI1NiIsImtpZCI6ImNESzlnT1M4QzlHMzVmLV9JbEZsVkhxSXZwS0xmcXR3NUpabmUxVFNvMmMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImplbmtpbnMtc2EiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiamVua2lucyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjExYWIyMDllLWMyMGQtNGZiYS05MjE4LTUzMTk2MWIxMTBiOSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmplbmtpbnMifQ.ftUyqHLVZGYxK2tgFeDdCo9Kv22_cmWQYbtMcZPO6tk_lAoEEflNT9WCnBEo9R7DDR1PLNw9UUsgCi7kOr8zI3xT1P0bWMcwvp2hRnF6-aEk2dR6-cK-m1Uh04TYFICnwWkuGO0ZOVW2WCea2SyaIESVe2-TK2u0DJXXTuv_hT5LGFrOr6-9Ew1MR1vUYKTjNvNCYrcHJOTb5ujsD4_lcs8MRFxpPcyTnNxuuvJwgC-gKv_FaZycdFT7lyNr8Oq_M4L9bgpR3OW3Vmp34cCwWHDHN-sM6ysNKzbaUDQtf7yKo6t54JhRSEFHusJqrKBe1UO9zyUFooWBld_wgN5aCsZclnHTDWwZg-cKYFHmrp3hoir7D2H52tKe2-OdUuhVk5bKJHO2xT1VitbcX5OmPx5ymtVW3nTCu37EnHouzkZqNBpuqQqgyHiALiUUu0Va6qgkcBtvhi94dO9h3udLWyv2gIr1WExQ8C44AmwqiZtq0ahgD2Ptysok-V-HAUec7pwIHkdnKLEMAQx_NNJqL2eRq4xQlLrVEb9LJI1d3g49XyqCjWTqxj3IsgZFsFUn_B7RIEn3EjSYn0MJ4a9X3KOv0A_eJUlk1mUq_zI1FpzmT0I3id8I8HIWwQ8u5xObY1y7E9f9_XjcYG7Mk8Cd5FFEShCKoHiWzsnKLOBswv4" apply -f service.yml'
                    sh 'kubectl --server=https://dna-name-mdrwrqam.hcp.eastus.azmk8s.io:443 --insecure-skip-tls-verify --token="eyJhbGciOiJSUzI1NiIsImtpZCI6ImNESzlnT1M4QzlHMzVmLV9JbEZsVkhxSXZwS0xmcXR3NUpabmUxVFNvMmMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImplbmtpbnMtc2EiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiamVua2lucyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjExYWIyMDllLWMyMGQtNGZiYS05MjE4LTUzMTk2MWIxMTBiOSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmplbmtpbnMifQ.ftUyqHLVZGYxK2tgFeDdCo9Kv22_cmWQYbtMcZPO6tk_lAoEEflNT9WCnBEo9R7DDR1PLNw9UUsgCi7kOr8zI3xT1P0bWMcwvp2hRnF6-aEk2dR6-cK-m1Uh04TYFICnwWkuGO0ZOVW2WCea2SyaIESVe2-TK2u0DJXXTuv_hT5LGFrOr6-9Ew1MR1vUYKTjNvNCYrcHJOTb5ujsD4_lcs8MRFxpPcyTnNxuuvJwgC-gKv_FaZycdFT7lyNr8Oq_M4L9bgpR3OW3Vmp34cCwWHDHN-sM6ysNKzbaUDQtf7yKo6t54JhRSEFHusJqrKBe1UO9zyUFooWBld_wgN5aCsZclnHTDWwZg-cKYFHmrp3hoir7D2H52tKe2-OdUuhVk5bKJHO2xT1VitbcX5OmPx5ymtVW3nTCu37EnHouzkZqNBpuqQqgyHiALiUUu0Va6qgkcBtvhi94dO9h3udLWyv2gIr1WExQ8C44AmwqiZtq0ahgD2Ptysok-V-HAUec7pwIHkdnKLEMAQx_NNJqL2eRq4xQlLrVEb9LJI1d3g49XyqCjWTqxj3IsgZFsFUn_B7RIEn3EjSYn0MJ4a9X3KOv0A_eJUlk1mUq_zI1FpzmT0I3id8I8HIWwQ8u5xObY1y7E9f9_XjcYG7Mk8Cd5FFEShCKoHiWzsnKLOBswv4" rollout restart deployment/java-app-deployment'

                    echo "K8s Deployement done...!!"

                    sh 'kubectl get deployments'
                    sh 'sleep 100 ; kubectl get services'
                }
                
            }
        }
        stage ('Archive and clean Workspace') {
            steps {
                archiveArtifacts artifacts: 'target/*.jar' , followSymlinks: false
                cleanWs() 
            }
        }
    }
    post {
        success {
            echo 'The pipeline succeed...!!'
        }
        failure {
            echo 'The pipeline failed....!!'
        }
    }
}
